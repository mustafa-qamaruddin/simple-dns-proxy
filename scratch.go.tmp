package main

import (
	"fmt"
	"github.com/sirupsen/logrus"
	"io"
	"net"
	"time"
)

func main() {
	listen, err := net.Listen("tcp", "localhost:5300")
	if err != nil {
		return
	}
	defer listen.Close()
	for {
		logrus.Infof("start server loop %s", time.Now().Format("2 Jan 2006 15:04:05"))

		conn, err := listen.Accept()
		logrus.Infof("listen accept %s", time.Now().Format("2 Jan 2006 15:04:05"))

		if err != nil {
			return
		}
		// This new goroutine will execute concurrently with the calling one.
		go handleIncomingRequest(conn)
	}
}


func handleIncomingRequest(conn net.Conn) {
	logrus.Infof("received new request at %s", time.Now().Format("2 Jan 2006 15:04:05"))
	// store incoming data
	buffer := make([]byte, 4096)
	_, err := conn.Read(buffer)
	if err != nil {
		return
	}
	CONNECT := "localhost:53"
	c, err := net.Dial("tcp", CONNECT)
	if err != nil {
		fmt.Println(err)
		return
	}
	var reply []byte
	for {
		reply, err = io.ReadAll(c)
		if err != nil {
			return
		}
		if len(reply) > 0 {
			break
		}
	}
	c.Close()
	// respond
	conn.Write(reply)
	// close conn
	conn.Close()
}
